using StaticArrays

"""
    applyVOF!(f,Œ±,nÃÇ,InterfaceSDF)

Calculate volume fraction, `f`, according to a given signed distance function, `InterfaceSDF`. The dark fluid is indicated with negative distance.
"""
function applyVOF!(f,Œ±,nÃÇ,InterfaceSDF)
    # set up the field with PLIC Calculation
    @loop applyVOF!(f,Œ±,nÃÇ,InterfaceSDF,I) over I‚ààinside(f)
    # clean wisp: value too close to 0 or 1
    cleanWisp!(f)
end
@inline function applyVOF!(f::AbstractArray{T,D},Œ±::AbstractArray{T,D},nÃÇ::AbstractArray{T,Dv},InterfaceSDF,I) where {T,D,Dv}
    # forwarddiff cause some problem so using finite diff
    Œ¥d = 0.01
    for i‚àà1:D
        xyzpŒ¥ = SVector{D,T}(loc(0,I) .+Œ¥d .*Œ¥(i,I).I)
        xyzmŒ¥ = SVector{D,T}(loc(0,I) .-Œ¥d .*Œ¥(i,I).I)
        nÃÇ[I,i] = InterfaceSDF(xyzpŒ¥) - InterfaceSDF(xyzmŒ¥)
    end
    sumN2 = 0; for i‚àà1:D sumN2+= nÃÇ[I,i]^2 end

    # (nÃÇ¬∑ùê± - Œ±)/|nÃÇ| = d
    Œ±[I] = - ‚àösumN2*InterfaceSDF(loc(0,I).-0.5)

    # the PLIC estimation
    f[I] = getVolumeFraction(nÃÇ,I,Œ±[I])
end

"""
    BCVOF!(f,Œ±,nÃÇ;perdir)

Apply boundary condition to volume fraction, intercept, and normal with Neumann or Periodic ways
"""
function BCVOF!(f,Œ±,nÃÇ;perdir=())
    N,D = size_u(nÃÇ)
    for j‚àà1:D
        if j in perdir
            # TODO: can we merge f,Œ±,nÃÇ together?
            @loop f[I] = f[CIj(j,I,N[j]-1)] over I ‚àà slice(N,1,j)
            @loop f[I] = f[CIj(j,I,2)] over I ‚àà slice(N,N[j],j)
            for i ‚àà 1:D
                @loop nÃÇ[I,i] = nÃÇ[CIj(j,I,N[j]-1),i] over I ‚àà slice(N,1,j)
                @loop nÃÇ[I,i] = nÃÇ[CIj(j,I,2),i] over I ‚àà slice(N,N[j],j)
            end
            @loop Œ±[I] = Œ±[CIj(j,I,N[j]-1)] over I ‚àà slice(N,1,j)
            @loop Œ±[I] = Œ±[CIj(j,I,2)] over I ‚àà slice(N,N[j],j)
        else
            @loop f[I] = f[I+Œ¥(j,I)] over I ‚àà slice(N,1,j)
            @loop f[I] = f[I-Œ¥(j,I)] over I ‚àà slice(N,N[j],j)
        end
    end
end

"""
    cleanWisp!(f; tol)

Clean out values in `f` too close to 0 or 1. The margin is 10 times the resolution of float type `T`.
"""
function cleanWisp!(f::AbstractArray{T,D}, tol=10eps(T)) where {T,D}
    @loop f[I] = ifelse(f[I]<       tol, T(0), f[I]) over I‚ààinside(f)
    @loop f[I] = ifelse(f[I]>one(T)-tol, T(1), f[I]) over I‚ààinside(f)
end


"""
    containInterface(f)

Check whether `f` is interface cell.
"""
@inline containInterface(f) = 0<f<1

"""
    fullorempty(fc)

Check whether `fc` is full of dark or light fluid.
"""
@inline fullorempty(fc) = (fc==0.0 || fc==1.0)

"""
    get3CellHeight(f,I,summingDir)

Get three cell volume summation around index `I` along direction `summingDir`.
"""
@inline @fastmath get3CellHeight(f,I,summingDir) = f[I]+f[I-Œ¥(summingDir,I)]+f[I+Œ¥(summingDir,I)]

@inline @fastmath getœÅ(I,f,ŒªœÅ) = ŒªœÅ + (1-ŒªœÅ)*f[I]
@inline @fastmath getœÅ(d,I,f,ŒªœÅ) = ŒªœÅ + (1-ŒªœÅ)*œï(d,I,f)

œÅu2u!(u,œÅu,f,ŒªœÅ) = @loop œÅu2u!(u,œÅu,f,ŒªœÅ,I) over I‚ààinside(f)
@inline @fastmath œÅu2u!(u,œÅu,f::AbstractArray{T,D},ŒªœÅ,I) where {T,D} = for d‚àà1:D
    u[I,d] = œÅu[I,d]/getœÅ(d,I,f,ŒªœÅ)
end

u2œÅu!(œÅu,u,f,ŒªœÅ) = @loop u2œÅu!(œÅu,u,f,ŒªœÅ,I) over I‚ààinside(f)
@inline @fastmath u2œÅu!(œÅu,u,f::AbstractArray{T,D},ŒªœÅ,I) where {T,D} = for d‚àà1:D
    u[I,d] = œÅu[I,d]*getœÅ(d,I,f,ŒªœÅ)
end

@inline @fastmath f·∂†2œÅuf(I,f·∂†,Œ¥l,ŒªœÅ) = Œ¥l*ŒªœÅ + (1-ŒªœÅ)*f·∂†[I]

# TODO: Perhaps using overload to avoid if branch?
@inline @fastmath function getŒº(i,j,I,f::AbstractArray{T,D},ŒªŒº,Œº) where {T,D}
    if i==j
        return Œº*(f[I-Œ¥(i,I)]*(1-ŒªŒº)+ŒªŒº)
    end
    s = zero(T)
    for II‚àà(I-Œ¥(i,I)-Œ¥(j,I)):I
        s+= f[II]
    end
    s/=4
    return Œº*(s*(1-ŒªŒº)+ŒªŒº)
end